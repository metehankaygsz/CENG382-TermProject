@page
@model ClassManagementSystem.Areas.Instructor.Pages.Reservations.IndexModel
@{
    ViewData["Title"] = "My Reservations";
}

@section Styles {
  <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet" />
  <link href="~/css/calendar.css" rel="stylesheet" />
}

<h1>@ViewData["Title"]</h1>

<!-- Booking modal -->
<div class="modal fade" id="crudModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <form method="post" asp-page-handler="Create">
        <div class="modal-header">
          <h5 class="modal-title">New Reservation</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <div asp-validation-summary="ModelOnly" class="text-danger"></div>

          <div class="mb-3">
            <label asp-for="Input.TermId" class="form-label">Term</label>
            <select asp-for="Input.TermId" class="form-select" asp-items="Model.Terms">
              <option value="">-- select term --</option>
            </select>
          </div>
          <div class="mb-3">
            <label asp-for="Input.ClassroomId" class="form-label">Classroom</label>
            <select asp-for="Input.ClassroomId" class="form-select" asp-items="Model.Classrooms">
              <option value="">-- select room --</option>
            </select>
          </div>
          <div class="mb-3">
            <label asp-for="Input.Date" class="form-label">Date</label>
            <input asp-for="Input.Date" type="date" class="form-control" />
          </div>
          <div class="row">
            <div class="col">
              <label asp-for="Input.StartTime" class="form-label">Start</label>
              <input asp-for="Input.StartTime" type="time" class="form-control" />
            </div>
            <div class="col">
              <label asp-for="Input.EndTime" class="form-label">End</label>
              <input asp-for="Input.EndTime" type="time" class="form-control" />
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Save</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Reservation Details/Edit Modal -->
<div class="modal fade" id="detailsModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content" id="detailsModalContent">
      <!-- AJAX-loaded content goes here -->
    </div>
  </div>
</div>

<!-- Calendar -->
<div class="card mb-3">
  <div class="card-body p-0">
    <div id="calendar"></div>
  </div>
  <div class="card-footer">
    <div class="legend-item"><span class="legend-color" style="background:green"></span> Approved</div>
    <div class="legend-item"><span class="legend-color" style="background:red"></span> Pending</div>
    <div class="legend-item"><span class="legend-color" style="background:orange"></span> Holiday</div>
  </div>
</div>

@section Scripts {
  <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // 1) Holiday backgrounds
      const holidayBg = @Html.Raw(
        System.Text.Json.JsonSerializer.Serialize(
          Model.Holidays.Select(d => new {
            start   = d.ToString("yyyy-MM-dd"),
            display = "background",
            color   = "orange",
            allDay  = true
          })
        )
      );

      // 2) Reservation events
      const reservationEvents = @Html.Raw(
        System.Text.Json.JsonSerializer.Serialize(
          Model.Reservations.Select(r => new {
            id    = r.Id,
            title = $"{(r.Classroom != null ? r.Classroom.Name : "No Room")} â€“ {(r.Term != null ? r.Term.Name : "No Term")}",
            start = $"{r.Date:yyyy-MM-dd}T{r.StartTime}",
            end   = $"{r.Date:yyyy-MM-dd}T{r.EndTime}",
            color = Model.Conflicts.Contains(r.Id!.Value)
                    ? "purple"
                    : ((r.IsApproved ?? false) ? "green" : "red")
          })
        )
      );

      const calendar = new FullCalendar.Calendar(
        document.getElementById('calendar'), {
          initialView: 'dayGridWeek',
          headerToolbar: {
            left:  'prev,next today',
            center:'title',
            right: 'dayGridMonth,timeGridWeek'
          },
          nowIndicator: true,
          selectable: true,
          selectMirror: true,
          allDaySlot: false, // <--- Add this line to remove the all-day row in week view

          // merge background-holidays + reservations
          events: [...holidayBg, ...reservationEvents],

          select: info => {
            // prefill the modal form
            document.querySelector('[name="Input.Date"]').value      = info.startStr.slice(0,10);
            document.querySelector('[name="Input.StartTime"]').value = info.startStr.slice(11,16);
            document.querySelector('[name="Input.EndTime"]').value   = info.endStr.slice(11,16);
            new bootstrap.Modal(document.getElementById('crudModal')).show();
            calendar.unselect();
          },

          // Add event click handler for reservation events
          eventClick: function(info) {
            // Only handle reservation events (not holidays/backgrounds)
            if (!info.event.id) return;

            // Load details partial via AJAX
            fetch(`/Instructor/Reservations/Index?handler=Details&id=${info.event.id}`)
              .then(resp => resp.text())
              .then(html => {
                document.getElementById('detailsModalContent').innerHTML = html;
                new bootstrap.Modal(document.getElementById('detailsModal')).show();
              });
          },
        }
      );

      calendar.render();
    });

    // Listen for clicks on the Edit button inside the details modal
    document.addEventListener('click', function(e) {
      if (e.target && e.target.id === 'editReservationBtn') {
        const id = e.target.getAttribute('data-id');
        fetch(`/Instructor/Reservations/Index?handler=Edit&id=${id}`)
          .then(resp => resp.text())
          .then(html => {
            document.getElementById('detailsModalContent').innerHTML = html;
            // Modal is already open, just replace content
          });
      }
    });

    // Listen for clicks on the Delete button inside the details modal
    document.addEventListener('click', function(e) {
      if (e.target && e.target.id === 'deleteReservationBtn') {
        const id = e.target.getAttribute('data-id');
        if (confirm('Are you sure you want to delete this reservation?')) {
          const formData = new FormData();
          formData.append('id', id);
          // Add antiforgery token
          formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

          fetch(`/Instructor/Reservations/Index?handler=Delete`, {
            method: 'POST',
            body: formData
          })
          .then(resp => resp.json())
          .then(data => {
            if (data.success) {
              bootstrap.Modal.getInstance(document.getElementById('detailsModal')).hide();
              location.reload();
            } else {
              alert('Delete failed.');
            }
          });
        }
      }
    });

    // Form validation for reservation creation
    document.querySelector('#crudModal form').addEventListener('submit', function(e) {
      const term = this.querySelector('[name="Input.TermId"]');
      const classroom = this.querySelector('[name="Input.ClassroomId"]');
      const date = this.querySelector('[name="Input.Date"]');
      const start = this.querySelector('[name="Input.StartTime"]');
      const end = this.querySelector('[name="Input.EndTime"]');

      let msg = [];
      if (!term.value) msg.push('Please select a term.');
      if (!classroom.value) msg.push('Please select a classroom.');
      if (!date.value) msg.push('Please select a date.');
      if (!start.value) msg.push('Please select a start time.');
      if (!end.value) msg.push('Please select an end time.');

      if (msg.length > 0) {
        alert(msg.join('\n'));
        e.preventDefault();
      }
    });
  </script>
}

@Html.AntiForgeryToken()